http://eloquentjavascript.net/

Chapter 1

Values:
numbers
strings
booleans
objects
functions 
Undefined Values

Call for one and you have it. 
Dynamically allocated bits for storing values
If you run out, you'll be able to reassign. 
This is only a problem if you need to create a bunch

Numbers
64 bits to store a number
2^64 different numbers = 18 quintillion

Scientific Notation: 
2.998e8
That is 2.998 x 10^8 = 299,800,000

Arithmetic

+ * / 
% modulo
144 % 12 = 0
314 % 100 = 14

Special Numbers

Infinity & -Infinity
NaN = Not a number
0 / 0 = NaN

Strings

"Double quotes and "
'single quotes are okay'
"consitency is best'

\ is a special character for escaping a string so you can add quotes or special meaning.

"This is the first line\nAnd this is the second"

"A newline character is written like "\n"."

can be expressed:

"A newline character is written like \"\\n\"."

Operators cannot be used on strings except for '+' which will concatenate

"con" + "cat" + "e" + "nate" = "concatenate"

Unary Operators

console.log(typeof 4.5)
// -> number
console.log(typeof "x")
// -> String

Booleans

console.log(3 > 2)
-> True

Strings can be compared in a similar way: 

console.log("Aardvark" < "Zoraster")
-> True

This is based of the Unicode standard

console.log("Itchy" != "Scratchy")
-> True

One Javascript Value that is not equal to itself: NaN

console.log(NaN == NaN)
-> False

Logical Operators

console.log(true && false)
-> false

console.log(true && true)
-> true

&& and
|| or
!= not

? -- Huh? 

Ternary operatory/Conditional operator
kinda like either or...

console.log(true ? 1 : 2);
-> 1
console.log(false ? 1: 2);
-> 2

True will yield the value on the left
False will yield the value on the right

Undefined Values

null and undefined
are essentially interchangeable...

Automatic Type Conversion
gets a little tricky, here are some examples: 

console.log(8 * null)
// → 0
console.log("5" - 1)
// → 4
console.log("5" + 1)
// → 51
console.log("five" * 2)
// → NaN
console.log(false == 0)
// → true

if you want precise comparison use: 
=== or !==
you might consider using these more often as a defensive measure

Short Circuiting of Logical Operators

The || operator will return the value to its left when that can be converted to true and will return the value on its right otherwise
console.log(null || "user")
-> user
console.log("me" || "you")
-> me

&& works the other way around... When the value to its left is something that converts to false it returns that value and otherwise it returns the value on the right. 

The right will only be evaluated when necessary, this is why its called short circuting


Chapter 2

Program Structure

programming - express sentences in meaningful prose

Expressions and Statements

fragment of code that produces a value is called an expression

Put Semi Colons at the end of statements until you learn the subtleties of Javascript

Variables

Interesting metaphor: 
you should imagine variables as tentacles, rather than boxes. They do not contain values:
They grasp them. A program can access only the values that is still has a hold on
When you need to remember something you grow a tentacle to hold on to it or you reattach one of your exisiting tentacles to it. 

Hmmm.. Haven't heard it described like that before, but is a nice way to break it down. 

var luigisDebt = 140;
luigisDebt = luigisDept -35; 
console.log(luigisDept);
-> 105

A single var statement may define multiple variables. 
The definitions must be seperated by commas

Keywords and Reserved Words

Full list of keywords: 

break case catch class const continue debugger
default delete do else enum export extends false
finally for function if implements import in
instanceof interface let new null package private
protected public return static super switch this
throw true try typeof var void while with yield

The Environment

When a program starts up the environment contains everything that the language uses

Functions

Functions are pieces of a program wrapped in a value. 
The tentacle grasps another piece of code. 
Executing a function is called
invoking, calling, or applying

alert("Good Morning")

The console.log function

var x = 30;
console.log("the value of x is", x)

Return Values

console.log(Math.max(2, 4));
// -> 4

A function 'returns' a value. Anything that produces a value is an expression in JavaScript

console.log(Math.min(2,4) + 100);
// -> 102

Prompt and Confirm

confirm("Shall we, then?");
prompt("Tell me everything you know.", "...");

These functions aren't common as much anymore, but they are good for learning and experiments

Control Flow

var theNumber = Number(prompt("Pick a number", ""));
alert("Your number is the square root of " +
      theNumber * theNumber);
	  
This is an example of straight control flow. 

Conditional Execution

Think of a fork in the road, but they both can lead to the same place in the end. 

var theNumber = Number(prompt("Pick a number", ""));
if (!isNaN(theNumber))
  alert("Your number is the square root of " +
        theNumber * theNumber);

IF + ELSE

var theNumber = Number(prompt("Pick a number", ""));
if (!isNaN(theNumber))
  alert("Your number is the square root of " +
        theNumber * theNumber);
else
  alert("Hey. Why didn't you give me a number?");
  
  
IF + ELSE IF + ELSE

var num = Number(prompt("Pick a number", "0"));

if (num < 10)
  alert("Small");
else if (num < 100)
  alert("Medium");
else
  alert("Large");
 
While and Do Loops

console.log(0);
console.log(2);
console.log(4);
.
.
console.log(n*2);

this is tedious so we use... while loops 

var result = 1;
var counter = 0;
while (counter < 10) {
  result = result * 2;
  counter = counter + 1;
}
console.log(result);
// → 1024

